- [ ] 设计材料 

- [ ] list数据结构。

	用途：存储蛇身的坐标。

	原因：蛇身长度不定，所以需要能存储不定长度的数据结构，而list正好符合。

- [ ] 蛇身类的数据结构

	用途：封装所有对蛇身的数据和操作，例如list数据结构，蛇的move操作。

	原因：使用面向对象的方式来抽象考虑问题，练习抽象能力。


- [ ] setGeometry()

	用途：绘制一个窗口，使蛇和食物显示在窗口上，窗口的位置，大小可以设置

	原因：蛇和食物需要显示在一个窗口上。

- [ ] setBrush(QtGui.QColor(0, 0, 0))

	用途：使用画刷来画矩形,QtGui.QColor(x, y, z)，根据x，y，z的不同可以表示画出不同颜色的矩形

	原因：可以方便的直接为矩形区域着色，而不用一个像素点一个像素点来着色

- [ ] setPen()

	用途：设置画笔的宽度及颜色，可以根据需要，画或粗或细的线条。

	原因：需要用较细的线条画出蛇运动的矩形边界。

- [ ] drawRect(x, y, width, height)

	用途：坐标(x,y)为距左上角端点的坐标，width为矩形区域的宽，height为矩形区域的高

	原因：用矩形来表示蛇身和实物。

- [ ] move()

  用途：用来表示蛇身移动的操作。蛇根据自己蛇头的方向以及当前的速度进行移动，也就是根据当前修改整个表示蛇的矩形的坐标位置，如果当前蛇的方向是向右，并且速度为1，那么，蛇的头的x坐标应该加1，y坐标不变，并且，移动以前蛇头的位置变成移动以后紧挨着蛇头的蛇身，同时，删除蛇尾的方块。

	备案：蛇运动操作：将当前的list的数据结构的第一个元素作为蛇头，然后，先把list第一个元素赋值给蛇的最后一个元素，然后蛇list[0]再向下一个坐标移动，也就是把list[0][0]的值加70.

	原因：蛇是运动的，蛇需要根据自己的方向和速度来一直运动

- [ ] readDirection()

	用途：根据用户的输入来修改蛇头(list[0])的方向的值。比如有如下对应关系

	        方向键右：0
					方向键上：1
					方向键下：2
					方向键左：3

	原因：需要根据用户输入的方向，来修改蛇的方向对应的值

- [ ] 定时器

	用途：每隔一定的时间，通过move操作，使蛇运动一次，比如每隔1s，让蛇以坐标向右增加20的速度来移动蛇。

	原因：通过定时器，产生一个事件，让触发蛇自己运动。

- [ ] 撞墙检测

  用途：如果当前蛇头的位置，超出了运动边界，那么判断蛇撞墙了，结束游戏。

	原因：如果当前蛇运动的坐标，大于当前运动边界，那么即视为撞墙。

- [ ] 撞到自己检测

	用途：蛇头自己撞到自己的身体

	原因：蛇头的运动坐标和蛇身的坐标发生重叠，即视为撞上自己。

- [ ] 撞到食物检测

  用途：当list[0]遇到食物的时候，蛇身体的长度会加1，

	原因：因为当蛇遇到食物时，需要将蛇的身体长度加1.

	实现形式：先向list中添加一个新的元素，然后将list[0]的值赋给新元素，然后将食物的坐标赋给list[0],并让list继续按照原来的方向运动。

- [ ] 食物坐标随机生成规则

	用途：用来在和蛇头所在的特定的位置，生成食物

	原因：因为食物的坐标，必须是蛇头通过move操作以后可以到达的位置，所以，食物的坐标(x,y)必须与蛇头的坐标(x0, y0)满足如下关系，

	x = x0 + n1*(60+10)

	且y = y0 + n2*(60+10)，

	(n1=0,±1,±2...±10),(n2=0,±1,±2,±3,±4,±5)

- [ ] import random

  用途：导入随机数相关的包

	原因：因为要使用random.choice相关的随机函数来生成食物，语法需要。

- [ ] 初始化操作

	用途：初始化蛇的状态

	原因：让程序有个起始的状态。


- [ ] 事件处理机制

	用途：通过定时器或者按键操作，来产生事件，同时触发相应的事件响应机制。

	原因：响应事件的发生，并处理事件

- [ ] 信号槽机制

	用途：当事件发生的时候，信号槽机制来处理事件

	原因：当事件发生的时候，会发出一个信号给接收方(也就是槽)，而槽可以与信号建立一个连接，接收事件的相关信息。


- [ ] 游戏结束

	程序退出
